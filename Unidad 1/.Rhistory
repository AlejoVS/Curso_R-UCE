rmarkdown::render("in.Rmd", output_format = "powerpoint_presentation")
rmarkdown::render("C01-Introduccion.Rmd", output_format = "powerpoint_presentation")
rmarkdown::render("C01-Introduccion.Rmd", output_format = "powerpoint_presentation")
getwd()
setwd("~/Learning-R/Curso R - UCE/Presentaciones")
rmarkdown::render("C01-Introduccion.Rmd", output_format = "powerpoint_presentation")
getwd()
<b> <font color=SteelBlue face=Cambria size=7> = </font> </b>
![R](figures/interfaz_R.PNG)
<b> <font color=SteelBlue face=Cambria size=7> = </font> </b>
![R](figures/interfaz_R.PNG)
## <b> <font color=SteelBlue face=Arial size=6> Instalación de paquetes</font> </b>
<p align="right" width="20" height="20">
![Paquetes](figures/rstudio_paquetes.png){ width=15% }
search()
library(ggplot2)
search()
# Instalacion desde el repositorio CRAN
install.packages('tidyverse')
# Reducimos el area de impresion
options(width=45)
rnorm(10)
# Aumentamos el area de impresion
options(width=95)
rnorm(10)
# Instalacion multiples paquetes
packages <- c("ggplot2","lubridate","readr")
install.packages(packages, dependencies=TRUE)
# funciones apply
sapply(X=packages, FUN=install.packages, dependencies=TRUE)
(.packages())
install.packages(packages, dependencies=TRUE)
(.packages())
(.packages())
# Cargar las librerias
library(ggplot2)
# Cargar varios paquetes
packages <- c("ggplot2","lubridate","readr")
sapply(X=packages, FUN=library, character.only=TRUE)
# funciones apply
# sapply(X=packages, FUN=library, character.only=TRUE)
(.packages())
# Cargar las librerias
library(ggplot2)
# Vectores
typeof(a)
# Vectores
a <- 250
typeof(a)
# Longitud (Número de elementos)
length(a)
# Atributos (Metadata)
attributes(a)
# Para probar que una estructura de datos es un vector (atómico o lista)
# se utiliza la función:
is.vector(a)
# Vectores atómicos
dbl_var <- c(1, 2, -1)
int_var <- c(3L, 7L, 1L) # con el sufijo L se declaran números enteros
log_var <- c(FALSE, TRUE, F, T) # TRUE y FALSE (T, F) se usan para crear
c(1, c(2, c(3,4))) ; c(1, 2, 3, 4) # los vectores pueden ser anidados
a <- c(1, c(2, c(3,4)))
a
a <- c(1, c(2, c(3,4))); c(1, 2, 3, 4)
a
c(1, c(2, c(3,4))) ; c(1, 2, 3, 4,5) # los vectores pueden ser anidados
typeof(dbl_var)
# Elementos de una matriz
# Columnas 2 y 4
mtx <- matrix (1:12, nrow=3, ncol=4, byrow=FALSE)
mtx[,c(2,4)]
# Filas 2 y 4
mtx[c(2,4),]
x
# Ejemplo más ilustrativo
x<-array(c(45,46,65,55,170,167,48,49,68,56,169,165),c(2,3,2))
dimnames(x)<-list(c("hombres","mujeres"),c("edad","peso","altura"),
c("Sur","Norte"))
x
x[,,3]
# Ejemplo más ilustrativo
x<-array(c(45,46,65,55,170,167,48,49,68,56,169,165),c(2,3,2))
x <- c(5,6,7,8)
y <- (10,20,15,30)
y <- c(10,20,15,30)
plot(x,y)
plot(x,y,,type="m",x=lab"Eje X",ylab="Eje Y")
plot(x,y,,type="n",x=lab"Eje X",ylab="Eje Y")
plot(x,y,,type="n",xlab="Eje X",ylab="Eje Y")
plot(x,y,,type="n",xlab="Eje X",ylab="Eje Y")
plot(x,y,xlab="Eje X",ylab="Eje Y")
linea <- lm(x,y)
linea <- lm(x~y)
abline(linea)
linea
abeline(linea)
abline(linea)
plot(x,y,xlab="Eje X",ylab="Eje Y")
abline(linea)
points(x,y,xlab="Eje X",ylab="Eje Y")
linea <- lm(x~y)
plot(x,y,xlab="Eje X",ylab="Eje Y")
points(x,y,xlab="Eje X",ylab="Eje Y")
abline(linea)
x <- c(5,6,7,8)
y <- c(10,20,15,30)
plot(x,y)
points(x,y,xlab="Eje X",ylab="Eje Y")
points(x,y,xlab="Eje X",ylab="Eje Y")
points(x,y)
plot(x,y)
points(x,y)
points(x,y,type="n",xlab="Eje X",ylab="Eje Y")
plot(x,y,type="n",xlab="Eje X",ylab="Eje Y")
points(x,y)
abline(linea)
linea <- lm(x~y)
abline(linea)
5+10
8/20
sin(10)
# Informacion paquetes basicos
search()
# Instalacion desde el repositorio CRAN
install.packages('tidyverse')
# Se indica si se deben instalar o no los
# paquetes requeridos para que este funcione.
install.packages('tidyverse', dependencies=TRUE)
# Instalacion multiples paquetes
packages <- c("reshape","lubridate","readr")
install.packages(packages, dependencies=TRUE)
# funciones apply
sapply(X=packages, FUN=install.packages, dependencies=TRUE)
# Cargar las librerias
library(ggplot2)
# Cargar varios paquetes
packages <- c("ggplot2","lubridate","readr")
# funciones apply
sapply(X=packages, FUN=library, character.only=TRUE)
# Conocer que paquetes están cargados
(.packages())
#----- Vectores
a <- 250
typeof(a)
a <-  5
b <-  5
if (a == b)
if (a == b){
print("a es igual a b")
}
print(a)
if(a>b){
a = a+2
print(a)
}
a = a+2
a <-  7
if(a>b){
a = a+2
}
a <-  8
b <-  5
if (a == b){
print("a es igual a b")
}
a <-  5
b <-  5
if (a == b){
print("a es igual a b")
}
print("a es diferente de b")
a <- 5
b <- 5
if (a == b){
print("a es igual a b")
} else{
print("a es diferente de b")
}
a <- 7
b <- 5
if (a == b){
print("a es igual a b")
} else{
print("a es diferente de b")
}
x <- 4
if (x > 0) {
texto <- 'positivo'
} else {
texto <- 'positivo'
}
texto
x <- c(2, 3, -5, 6, -2, 8)
if (x > 0) {
print("positivo")
} else {
print("negativo")
}
knitr::opts_chunk$set(echo = TRUE)
x <- c(2, 3, -5, 6, -2, 8)
ifelse(x > 0,"positivo","negativo")
### for
x <- c(12, 22, 28, 41)
for (i in 1:4)
for (i in 1:4) {
print(i)
}
# Ejemplo 2
x <- c(12, 22, 28, 41)
for (i in x){
print(i+1)
}
print(i+5)
# Ejemplo 2
x <- c(12, 22, 28, 41)
for (i in x){
print(i+5)
}
cat('\n', i, 'a˜os dec’)
i <- i + 1
}
}
print("a")
### repeat
i <- 1
repeat {
if (i > 15) break
else{
print("a")
i <- i + 1
}
}
print(i, "años de edad")
i <- i + 1
### repeat
i <- 1
repeat {
if (i > 15) break
else{
print(i, "años de edad")
i <- i + 1
}
}
cat(i, "años de edad")
repeat {
if (i > 15) break
else{
cat(i, "años de edad")
i <- i + 1
}
}
repeat {
if (i > 15) break
else{
cat('\n',i, "años de edad")
i <- i + 1
}
}
### repeat
i <- 1
repeat {
if (i > 15) break
else{
cat('\n', i, "años de edad")
i <- i + 1
}
}
### repeat
i <- 1
repeat {
if (i > 5) break
else{
cat('\n', i, "años de edad")
i <- i + 1
}
}
i <- 1
while (i<5) {
i <- i+10
print(i)
}
i <- 1
while (i<5) {
print(i)
i <- i+10
}
i <- i+1
i <- 0
while (i<16) {
print(i)
i <- i+1
}
i <- 1
while (i<4) {
print(i)
i <- i+1
}
i <- 1
while (i<5) {
i <- i+1
print(i)
}
i <- 1
while (i<5) {
i <- i+10
print(i)
}
i <- i+2
i <- 1
while (i<5) {
i <- i+2
print(i)
}
install.packages("installr")
# Informacion paquetes basicos
search()
# Instalacion desde el repositorio CRAN
install.packages('tidyverse')
# Instalacion multiples paquetes
packages <- c("ggplot2","lubridate","readr")
install.packages(packages, dependencies=TRUE)
# Cargar las librerias
library(ggplot2)
# Conocer que paquetes están cargados
(.packages())
5+5
a <- 5
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
#----- Vectores
a <- 250
typeof(a)
# Longitud (Número de elementos)
length(a)
# Para probar que una estructura de datos es un vector (atómico o lista)
# se utiliza la función:
is.vector(a)
#----- Vectores atómicos
dbl_var <- c(1, 2, -1)
int_var <- c(3L, 7L, 1L) # con el sufijo L se declaran números enteros
int_var <- c(3L, 7L, 1L) # con el sufijo L se declaran números enteros
log_var <- c(FALSE, TRUE, F, T) # TRUE y FALSE (T, F) se usan para crear
chr_var <- c("Source", "Stat", "Lab")
is.logical(chr_var)
x <- list(1:3, c("Source", "Stat", "Lab"), c(TRUE, FALSE), c(1.3, 4.5))
str(x)
# probamos si x es una lista
is.list(x)
# pasamos a vector considerando las reglas de coerción
unlist(x)
x <- list(list(list("Source", "Stat")))
str(x)
# son equivalentes. un vector no puede contener otro vector
c(1, c(2, c(3,4)))  ;  c(1, 2, 3, 4)
x <- list(1:3, c("Source", "Stat", "Lab"), nomb_obj=c(TRUE, FALSE), c(1.3, 4.5))
x <- list(list(list("Source", "Stat")))
View(x)
x <- list(1:3, c("Source", "Stat", "Lab"), nomb_obj=c(TRUE, FALSE), c(1.3, 4.5))
x[4]
x[2]
x[[4]]
x$nomb_obj
mtx <- matrix (1:12,nrow=3, ncol=4, byrow=FALSE)
mtx
mtx <- matrix (1:12,nrow=3, ncol=4, byrow=TRUE)
mtx
# Elementos de una matriz
# Columnas 2 y 4
mtx <- matrix (1:12, nrow=3, ncol=4, byrow=FALSE)
mtx
mtx[,c(2,4)]
# Filas 2 y 3
mtx[c(2,3),]
mtx[1,3]
#----- Array
array(1:12,c(2,3,2))
# Ejemplo más ilustrativo
x<-array(c(45,46,65,55,170,167,48,49,68,56,169,165),c(2,3,2))
x
dimnames(x)<-list(c("hombres","mujeres"),c("edad","peso","altura"),
c("Sur","Norte"))
x
# Elementos de un arrays
x[,,"Sur"]
x["hombres",,]
dbl_vec <- c(1, 2, 3)
chr_vec <- c("R", "S", "T")
log_vec <- c(TRUE, FALSE, TRUE)
# Cremos el dataframe
df <- data.frame(dbl_vec, chr_vec, log_vec)
View(df)
View(df)
df
# Elementos de un dataframe
nomb <- c("John", "Paul", "George", "Ringo")
nac <- c(1940, 1941, 1943, 1940)
instr <- c("guitar", "bass", "guitar", "drums")
df <- data.frame(nomb, nac, instr)
View(df)
df[2, c(2,3)] #Mediante df[i, j] se obtiene la componente i, j del data frame.
df[2, 2] # componente 2, 2
df[3, 1] # componente 3, 1
df[3, ] # fila 3
df[ , 3]=="guitar" # columna 3 de df igual a "guitar"
# 1. Establecer el directorio de trabajo en el que quieres descargar la carpeta
setwd("~/Downloads")
setwd("~/")
# 1. Establecer el directorio de trabajo en el que quieres descargar la carpeta
setwd("~/Downloads")
setwd("C:/Users/Aguirre/Downloads")
# 1. Establecer el directorio de trabajo en el que quieres descargar la carpeta
setwd("C:/Users/Aguirre/Downloads")
# 2. Descargar el repositorio
download.file(url = "https://github.com/taller-R/clase_3/archive/master.zip",
destfile = "clase_3.zip")
# 3. Descomprimir las carpeta
unzip(zipfile = "clase_3.zip")
# 4. Cambiar nuevamente el directorio de trabajo
setwd("C:/Users/Aguirre/Downloads/clase_3-master")
# 5. Inspeccionar archivos en el directorio
list.files()
packages <- c('tidyverse','readxl','haven')
install.packages(packages)
(.packages())
library(packages)
packages <- c('tidyverse','readxl','haven','easypackages')
library(easypackages)
libraries(packages)
(.packages())
getwd()
list.files("Datasets/")
#### 1.2.1 Importar bases de datos en formato .csv
?read.csv2
personas <- read.csv2(file = "Datasets/enemdu_2020_09/enemdu_personas_2020_09.csv")
View(personas)
personas <- read.csv2(file = "Datasets/enemdu_2020_09/enemdu_personas_2020_09.csv",sep = ",", header = T, stringsAsFactors = F
)
personas <- read.csv2(file = "Datasets/enemdu_2020_09/enemdu_personas_2020_09.csv",sep = ",", header = T, stringsAsFactors = F)
personas <- read.csv2(file = "Datasets/enemdu_2020_09/enemdu_personas_2020_09.csv",sep = ",", header = T, stringsAsFactors = F)
personas <- read.csv2(file = "Datasets/enemdu_2020_09/enemdu_personas_2020_09.csv",sep = ",")
personas <- read.csv2(file = "Datasets/enemdu_2020_09/enemdu_personas_2020_09.csv",header = T)
View(personas)
personas <- read.csv2(file = "Datasets/enemdu_2020_09/enemdu_personas_2020_09.csv",header = T,sep = ",")
personas <- read.csv2(file = "Datasets/enemdu_2020_09/enemdu_personas_2020_09.csv",header = T,quote = T)
personas <- read.csv2(file = "Datasets/enemdu_2020_09/enemdu_personas_2020_09.csv",header = T,quote = ",")
personas <- read.csv2(file = "Datasets/enemdu_2020_09/enemdu_vivienda_hogar_2020_09.csv)
personas <- read.csv2(file = "Datasets/enemdu_2020_09/enemdu_vivienda_hogar_2020_09.csv")
personas <- read.csv2(file = "Datasets/enemdu_2020_09/enemdu_vivienda_hogar_2020_09.csv")
View(personas)
setwd("C:/Users/Aguirre/Downloads/clase_3-master")
setwd("C:/Users/Aguirre/Downloads/clase_3-master") # Cambiar este directorio
getwd()
data_csv <- read.csv2(file = 'datos/original/censo 2018.csv' ,sep = ",", header = T, stringsAsFactors = F)
data_csv <- read.csv2(file = 'datos/original/censo 2018.csv' ,sep = ",", header = T, stringsAsFactors = F)
View(data_csv)
data_dta <- read_dta(file = 'datos/original/Area - Caracteristicas generales (Personas).dta')
View(data_dta)
str(personas)
personas <- read.csv2(file = "Datasets/enemdu_2020_09/enemdu_vivienda_hogar_2020_09.csv")
str(personas)
# 1. Establecer el directorio de trabajo en el que quieres descargar la carpeta
setwd("C:/Users/Aguirre/Downloads")
# 2. Descargar el repositorio
download.file(url = "https://github.com/taller-R/clase_4/archive/master.zip",
destfile = "clase_4.zip")
# 3. Descomprimir las carpeta
unzip(zipfile = "clase_4.zip")
# 4. Cambiar nuevamente el directorio de trabajo
setwd("C:/Users/Aguirre/Downloadsclase_4-master")
# 4. Cambiar nuevamente el directorio de trabajo
setwd("C:/Users/Aguirre/Downloads/clase_4-master")
getwd()
