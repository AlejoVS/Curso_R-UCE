browserURL(url("https://dplyr.tidyverse.org/"),browser = getOption("browser"))
browserURL(url= "https://dplyr.tidyverse.org/",browser = getOption("browser"))
browseURL(url= "https://dplyr.tidyverse.org/",browser = getOption("browser"))
packages <- c('tidyverse','readxl','haven','easypackages','strings','writexl')
library(easypackages) #easypackages me permite cargar varios paquetes a la vez
libraries(packages)
bdd_bikes <- read_excel("Datasets/data_bikes/bikes.xlsx")
bdd_shop <- read_excel("Datasets/data_bikes/bikeshops.xlsx")
bdd_orders <- read_excel("Datasets/data_bikes/orderlines.xlsx")
View(bdd_bikes)
View(bdd_shop)
View(bdd_orders)
glimpse(bdd_bikes)
left_join(bdd_orders, bdd_bikes,by = c("product.id" = "bike.id"))
bdd_orders %>% left_join(bdd_bikes,by = c("product.id" = "bike.id"))
View(bdd_orders)
bike_final <- bdd_orders %>%
left_join(bdd_bikes,by = c("product.id" = "bike.id")) %>%
left_join(bdd_shop,by = c("customer.id" = "bikeshop.id"))
View(bike_final)
bike_final %>%  glimpse()
fs::dir_create("Datasets/Base Final")
### 3.3.1. Excel
bike_final %>%
write_xlsx("Datasets/Base Final/bike_final.xlsx")
### 3.3.2. CSV
bike_final %>%
write_xlsx("Datasets/Base Final/bike_final.csv")
base_final %>% write_sav("Datasets/Base Final/bike_fianl.sav")
bike_final %>% write_sav("Datasets/Base Final/bike_final.sav")
packages <- c('tidyverse','readxl','car')
library(easypackages) #easypackages me permite cargar varios paquetes a la vez
libraries(packages)
bdd_1 <- read_excel("Datasets/data_sociodemografica.xlsx")
View(bdd_1)
glimpse(bdd_1)
summary(bdd_1)
bdd_1$egresos <- as.numeric(bdd_1$egresos)
View(bdd_1)
summary(bdd_1)
unique(bdd_1$origen.fondos)
bdd_1$origen.fondos <- NULL
unique(bdd_1$estado.civil)
bdd_1$estado.civil <- ifelse(bdd_1$estado.civil == '-','SINF',bdd_1$estado.civil)
unique(bdd_1$estado.civil)
bdd_1$cargas <- ifelse(bdd_1$numero.cargas>0,"Si","No")
View(bdd_1)
bdd_1$sexo <- recode(bdd_1$genero,"'MASCULINO' = 1; 'FEMENINO' = 2; '-' = NA")
View(bdd_1)
glimpse(bdd_1$sexo)
glimpse(bdd_1)
table(bdd_1$sexo)
prop.table(bdd_1$sexo)
pro.table(bdd_1$sexo)
summary(bdd_1)
bdd_1$sexo <- recode(bdd_1$genero,"'MASCULINO' = 1; 'FEMENINO' = 2; '-' = 'NA'")
summary(bdd_1)
bdd_1$sexo <- as.integer(bdd_1$sexo)
summary(bdd_1$edad)
bdd_1$grupos.edad <- cut(bdd_1$edad,breaks = c(0,18,40,65,112),
labels = c('menor a 18','De 18 a 40',
'De 40 a 65','mayor a 65'))
bdd_1
bdd_1 <- tibble::as_tibble(bdd_1)
bdd_1
browseURL(url= "https://dplyr.tidyverse.org/",browser = getOption("browser"))
data("storms")
force(storms)
View(storms)
storms %>% select(day,hour) # solo las filas seleccionadas
base2 <- storms %>% select(day,hour) # solo las filas seleccionadas
View(base2)
rm(base2)
storms %>% select(-year, -wind) # todas excepto la indicada
storms %>% select(name:hour)
storms %>% select(-(name:hour))
storms %>% select(starts_with("l"))
storms %>% select(starts_with("l"))
storms %>% filter(wind >= 50)
b1 <- storms %>% filter(wind >= 50)
b1 <- storms %>% filter(wind >= 50, name %in% c("Alberto", "Alex", "Allison"))
storms %>% filter(wind>=50 & pressure<1010)
storms %>% arrange(wind)
storms %>% arrange(desc(wind))
storms %>% arrange(desc(wind))
storms %>% arrange(wind, year) # más de una variable
names(storms)
storms %>% rename(estado = status, viento = wind, presion = pressure, año = year)
storms %>% mutate(ratio = pressure/wind)
storms %>% mutate(ratio = pressure/wind) %>% select(ratio)
storms %>% mutate(ratio=pressure/wind, inverse=ratio^-1)
storms %>% mutate(freq.acumulative = cumsum(wind))
storms %>% mutate(freq.acumulative = cumsum(wind)) %>% select(freq.acumulative)
data("Salaries")
force(Salaries)
View(Salaries)
Salaries %>% summarise(mediana = median(salary), variancia = var(salary))
Salaries %>% summarise(mediana = median(salary), varianza = var(salary))
Salaries %>% group_by(sex)
Salaries %>%  group_by(sex) %>%
summarise(media = mean(salary), sum = sum(salary), n = n())
install.packages("coronavirus")
library(coronavirus)
update_dataset()
data("coronavirus")
force(coronavirus)
# 3. Escribir "Y" en la cosoloa y dar enter
# 4. cargar el data frame con las siguientes lineas de código
data("coronavirus") %>% data.frame()
# 3. Escribir "Y" en la cosoloa y dar enter
# 4. cargar el data frame con la siguiente linea de código
covid19 <- data("coronavirus")
force(coronavirus)
# 3. Escribir "Y" en la cosoloa y dar enter
# 4. cargar el data frame con la siguiente linea de código
data("coronavirus")
# 3. Escribir "Y" en la cosoloa y dar enter
# 4. cargar el data frame con la siguiente linea de código
data("coronavirus")
force(coronavirus)
View(coronavirus)
summary(coronavirus$date)
install.packages("devtools")
devtools::install_github("RamiKrispin/coronavirus")
# 3. Escribir "3" en la cosoloa y dar enter
# 4. cargar el data frame con la siguiente linea de código
data("coronavirus")
# 3. Escribir "3" en la cosoloa y dar enter
# 4. cargar el data frame con la siguiente linea de código
library(coronavirus)
# 3. Escribir "3" en la cosoloa y dar enter
# 4. cargar el data frame con la siguiente linea de código
update_dataset()
covid19 <- data.frame(coronavirus)
View(covid19)
summary(cvid19)
summary(covid19)
covid19 <- data.frame(coronavirus)
install.packages("devtools")
devtools::install_github("RamiKrispin/coronavirus")
covid19 <- data.frame(coronavirus)
# 3. Escribir "3" en la cosoloa y dar enter
# 4. cargar el data frame con la siguiente linea de código
update_dataset()
covid19 <- data.frame(coronavirus)
covid19 <- data.frame(coronavirus)
# 3. Escribir "3" en la cosoloa y dar enter
# 4. cargar el data frame con la siguiente linea de código
library(coronavirus)
update_dataset()
covid19 <- data.frame(coronavirus)
View(covid19)
summary(covid19)
library(tidyverse)
# 1.1. Estructura de la base de datos
coronavirus
covid19 <- tibble::as.tibble(coronavirus)
covid19 <- tibble::as.tibble(covid19)
covid19
unique(covid19$province)
### 1.2.1. Selección de las variables que voy analizar
bdd_covid <- covid19 %>% select(-province,-lat:long)
### 1.2.1. Selección de las variables que voy analizar
bdd_covid <- covid19 %>% select(-province,-(lat:long)
### 1.2.1. Selección de las variables que voy analizar
bdd_covid <- covid19 %>% select(-province,-(lat:long))
### 1.2.1. Selección de las variables que voy analizar
bdd_covid <- covid19 %>% select(-province,-(lat:long))
View(bdd_covid)
### 1.2.2. Obtener el total de casos confirmados por país
unique(bdd_covid$type)
total <- bdd_covid %>%
filter(type == "confirmed")
### 1.2.2. Obtener el total de casos confirmados por país
unique(total$type)
total <- bdd_covid %>%
filter(type == "confirmed") %>%
group_by(coutry)
total <- bdd_covid %>%
filter(type == "confirmed") %>%
group_by(country)
total
total <- bdd_covid %>%
filter(type == "confirmed") %>%
group_by(country) %>%
summarise('´Totalcasos´' = sum(cases)) %>%
arrange(desc(´Totalcasos´))
total <- bdd_covid %>%
filter(type == "confirmed") %>%
group_by(country) %>%
summarise('´Totalcasos´' = sum(cases)) %>%
arrange(desc('´Totalcasos´'))
total
total <- bdd_covid %>%
filter(type == "confirmed") %>%
group_by(country) %>%
summarise(Total_casos = sum(cases)) %>%
arrange(-Total_casos)
total %>% head(20)
total %>% head(30)
total %>% head(25)
total %>% head(20)
bdd_covid %>%
filter(date == max(date)) %>%
group_by(country,type) %>%
summarise(Total_casos = sum(cases)) %>%
pivot_wider(names_from = type,
values_from = Total_casos) %>%
arrange(-confirmed)
bdd_covid %>%
filter(date == max(date)) %>%
group_by(country,type) %>%
summarise(Total_casos = sum(cases)) %>%
pivot_wider(names_from = type,
values_from = Total_casos) %>%
arrange(-confirmed) %>%
head(20)
### 1.2.2. Obtener el total de casos confirmados por país
unique(bdd_covid$type)
### 1.2.2. Obtener el total de casos confirmados por país
unique(bdd_covid$type)
total <- bdd_covid %>%
filter(type == "confirmed") %>%
group_by(country) %>%
summarise(Confirmados = sum(cases)) %>%
arrange(-Total_casos)
total <- bdd_covid %>%
filter(type == "confirmed") %>%
group_by(country) %>%
summarise(Confirmados = sum(cases)) %>%
arrange(-Confirmados)
total %>% head(20)
mtx <- matrix(0,1,-1,0,1,1,1,0,1,nrow = 3,ncol = 3,byrow = F)
mtx <- matrix(C(0,1,-1,0,1,1,1,0,1),nrow = 3,ncol = 3,byrow = F)
mtx <- matrix(c(0,1,-1,0,1,1,1,0,1),nrow = 3,ncol = 3,byrow = F)
mtx
mtx <- matrix(c(0,1,-1,0,1,1,1,0,1),nrow = 3,ncol = 3,byrow = T)
mtx
solve(mtx)
mtx^3-2*mtx^2+2*mtx
mtx^3
mtx^2
2*mtx^2
mtx*mtx
2*mtx
mtx%*%mtx
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
m3<- mtx%*%mtx%*%mtx
m3 <- mtx%*%mtx%*%mtx
m2 <- mtx%*%mtx
m3-2*m2+2*mtx
m2
m3
m3-m2
m3-2*m2
det(mtx)
mt <- t(mtx)
mt
t(mtx)
solve(mtx)
-0.5+1
mtx <- matrix(1,-1,0,0,2,1,0,0,3)
mtx <- matrix(1,-1,0,0,2,1,0,0,3,nrow = 3,ncol = 3)
mtx <- matrix(c(1,-1,0,0,2,1,0,0,3),nrow = 3,ncol = 3)
mtx
mtx <- matrix(c(1,-1,0,0,2,1,0,0,3),nrow = 3,ncol = 3,byrow = T)
mtx
install.packages("Biodem")
#  Operaciones con matrices
library(Biodem)
mtx.exp(mtx,2)
mtx.exp(mtx,3)
mtx.exp(mtx,4)
mtx.exp(mtx,5)
m3-2*m2+2*mtx
# literal a
# (a) Calcule M3 − 2M2 + 2M.
m3 <- mtx.exp(mtx,3)
m2 <- mtx.exp(mtx,2)
m3-2*m2+2*mtx
## Ejercicio 1
mtx <- matrix(c(0,1,-1,0,1,1,1,0,1),nrow = 3,ncol = 3,byrow = T)
# literal a
# (a) Calcule M3 − 2M2 + 2M.
m3 <- mtx.exp(mtx,3)
m2 <- mtx.exp(mtx,2)
m3-2*m2+2*mtx
# (b) Calcule det(M), det(MT)
det(mtx)
det(t(mtx))
# (c) Deduzca que M es invertible y calcule su inversa.
solve(mtx)
mtx <- matrix(c(1,-1,0,0,2,1,0,0,3),nrow = 3,ncol = 3,byrow = T)
mtx.exp(mtx,5) # para calcular matricces A^n
total <- bdd_covid %>%
filter(type == "confirmed") %>%
group_by(country) %>%
summarise(Confirmados = sum(cases)) %>%
arrange(-Confirmados)
total %>% head(20)
bdd_covid %>%
group_by(country, type)
bdd_covid %>%
group_by(country, type) %>%
summarise(Confirmados = sum(cases))
bdd_covid %>%
group_by(country, type) %>%
summarise(Confirmados = sum(cases)) %>%
pivot_wider(names_from = type, values_from = Confirmados)
bdd_covid %>%
group_by(country, type) %>%
summarise(Confirmados = sum(cases)) %>%
pivot_wider(names_from = type, values_from = Confirmados) %>%
arrange(- confirmed)
bdd_covid %>%
group_by(country, type) %>%
summarise(Confirmados = sum(cases)) %>%
pivot_wider(names_from = type, values_from = Confirmados) %>%
arrange(- confirmed) %>%
mutate(Tasa_recuperados = recovered / confirmed,
Tasa_mortalidad = death / confirmed)
bdd_covid %>%
group_by(country, type) %>%
summarise(Confirmados = sum(cases)) %>%
pivot_wider(names_from = type, values_from = Confirmados) %>%
arrange(- confirmed) %>%
mutate(Tasa_recuperados = recovered / confirmed,
Tasa_mortalidad = death / confirmed) %>%
mutate(Tasa_recuperados = if_else(is.na(recover_rate), 0, Tasa_recuperados),
Tasa_mortalidad = if_else(is.na(recover_rate), 0, Tasa_mortalidad)) %>%
ungroup() %>%
mutate(confirmed_normal = as.numeric(confirmed) / max(as.numeric(confirmed)))
bdd_covid %>%
group_by(country, type) %>%
summarise(Confirmados = sum(cases)) %>%
pivot_wider(names_from = type, values_from = Confirmados) %>%
arrange(- confirmed) %>%
mutate(Tasa_recuperados = recovered / confirmed,
Tasa_mortalidad = death / confirmed) %>%
mutate(Tasa_recuperados = if_else(is.na(recover_rate), 0, Tasa_recuperados),
Tasa_mortalidad = if_else(is.na(recover_rate), 0, Tasa_mortalidad)) %>%
ungroup()
### 1.2.3. Tasa de mortalidad
bdd_covid %>%
group_by(country, type) %>%
summarise(Confirmados = sum(cases)) %>%
pivot_wider(names_from = type, values_from = Confirmados) %>%
arrange(- confirmed) %>%
mutate(Tasa_recuperados = recovered / confirmed,
Tasa_mortalidad = death / confirmed) %>%
mutate(Tasa_recuperados = if_else(is.na(Tasa_recuperados), 0, Tasa_recuperados),
Tasa_mortalidad = if_else(is.na(Tasa_mortalidad), 0, Tasa_mortalidad)) %>%
ungroup() %>%
mutate(confirmed_normal = as.numeric(confirmed) / max(as.numeric(confirmed)))
### 1.2.3. Tasa de mortalidad
bdd_covid %>%
group_by(country, type) %>%
summarise(Confirmados = sum(cases)) %>%
pivot_wider(names_from = type, values_from = Confirmados) %>%
arrange(- confirmed) %>%
mutate(Tasa_recuperados = recovered / confirmed,
Tasa_mortalidad = death / confirmed) %>%
mutate(Tasa_recuperados = if_else(is.na(Tasa_recuperados), 0, Tasa_recuperados),
Tasa_mortalidad = if_else(is.na(Tasa_mortalidad), 0, Tasa_mortalidad))
### 1.2.3. Tasa de mortalidad
bdd_covid %>%
group_by(country, type) %>%
summarise(Confirmados = sum(cases)) %>%
pivot_wider(names_from = type, values_from = Confirmados) %>%
arrange(- confirmed) %>%
mutate(Tasa_recuperados = recovered / confirmed,
Tasa_mortalidad = death / confirmed) %>%
mutate(Tasa_recuperados = if_else(is.na(Tasa_recuperados), 0, Tasa_recuperados),
Tasa_mortalidad = if_else(is.na(Tasa_mortalidad), 0, Tasa_mortalidad)) %>%
transmute(Tasa_recuperados = paste(round(Tasa_recuperados*100,2)),"%")
### 1.2.3. Tasa de mortalidad
bdd_covid %>%
group_by(country, type) %>%
summarise(Confirmados = sum(cases)) %>%
pivot_wider(names_from = type, values_from = Confirmados) %>%
arrange(- confirmed) %>%
mutate(Tasa_recuperados = recovered / confirmed,
Tasa_mortalidad = death / confirmed) %>%
mutate(Tasa_recuperados = if_else(is.na(Tasa_recuperados), 0, Tasa_recuperados),
Tasa_mortalidad = if_else(is.na(Tasa_mortalidad), 0, Tasa_mortalidad)) %>%
transmute(Tasa_recuperados = round(Tasa_recuperados*100,2))
### 1.2.3. Tasa de mortalidad
bdd_covid %>%
group_by(country, type) %>%
summarise(Confirmados = sum(cases)) %>%
pivot_wider(names_from = type, values_from = Confirmados) %>%
arrange(- confirmed) %>%
mutate(Tasa_recuperados = recovered / confirmed,
Tasa_mortalidad = death / confirmed) %>%
mutate(Tasa_recuperados = if_else(is.na(Tasa_recuperados), 0, Tasa_recuperados),
Tasa_mortalidad = if_else(is.na(Tasa_mortalidad), 0, Tasa_mortalidad))
### 1.2.3. Tasa de mortalidad
bbd_final <- bdd_covid %>%
group_by(country, type) %>%
summarise(Confirmados = sum(cases)) %>%
pivot_wider(names_from = type, values_from = Confirmados) %>%
arrange(- confirmed) %>%
mutate(Tasa_recuperados = recovered / confirmed,
Tasa_mortalidad = death / confirmed) %>%
mutate(Tasa_recuperados = if_else(is.na(Tasa_recuperados), 0, Tasa_recuperados),
Tasa_mortalidad = if_else(is.na(Tasa_mortalidad), 0, Tasa_mortalidad))
### 1.2.3. Tasa de mortalidad
bdd_final <- bdd_covid %>%
group_by(country, type) %>%
summarise(Confirmados = sum(cases)) %>%
pivot_wider(names_from = type, values_from = Confirmados) %>%
arrange(- confirmed) %>%
mutate(Tasa_recuperados = recovered / confirmed,
Tasa_mortalidad = death / confirmed) %>%
mutate(Tasa_recuperados = if_else(is.na(Tasa_recuperados), 0, Tasa_recuperados),
Tasa_mortalidad = if_else(is.na(Tasa_mortalidad), 0, Tasa_mortalidad))
bdd_final %>% head(20)
### 1.2.3. Tasa de mortalidad
bdd_final <- bdd_covid %>%
group_by(country, type) %>%
summarise(Confirmados = sum(cases)) %>%
pivot_wider(names_from = type, values_from = Confirmados) %>%
arrange(- confirmed) %>%
mutate(Tasa_recuperados = recovered / confirmed,
Tasa_mortalidad = death / confirmed) %>%
mutate(Tasa_recuperados = if_else(is.na(Tasa_recuperados), 0, Tasa_recuperados),
Tasa_mortalidad = if_else(is.na(Tasa_mortalidad), 0, Tasa_mortalidad)) %>%
mutate(Tasa_recuperados = paste(round(100 * Tasa_recuperados, 2), "%", sep = ""))
bdd_final %>% head(20)
### 1.2.3. Tasa de mortalidad
bdd_final <- bdd_covid %>%
group_by(country, type) %>%
summarise(Confirmados = sum(cases)) %>%
pivot_wider(names_from = type, values_from = Confirmados) %>%
arrange(- confirmed) %>%
mutate(Tasa_recuperados = recovered / confirmed,
Tasa_mortalidad = death / confirmed) %>%
mutate(Tasa_recuperados = if_else(is.na(Tasa_recuperados), 0, Tasa_recuperados),
Tasa_mortalidad = if_else(is.na(Tasa_mortalidad), 0, Tasa_mortalidad)) %>%
mutate(Tasa_recuperados = paste(round(100 * Tasa_recuperados, 2), "%", sep = ""),
Tasa_mortalidad = paste(round(100 * Tasa_mortalidad, 2), "%", sep = ""))
bdd_final %>% head(20)
bdd_final$country == Ecuador
which(bdd_final$country,Ecuador)
View(bdd_final)
which(bdd_final$country==[Ecuador])
bdd_final$country==[Ecuador]
bdd_final$country=[Ecuador]
bdd_final %>% filter(country == "Ecuador")
bdd_final <- bdd_covid %>%
group_by(country, type) %>%
summarise(Confirmados = sum(cases)) %>%
pivot_wider(names_from = type, values_from = Confirmados)
bdd_final %>% head(20)
bdd_final %>% filter(country == "Ecuador")
packages <- c('tidyverse')
library(easypackages) #easypackages me permite cargar varios paquetes a la vez
libraries(packages)
library(questionr)
data(rp2012)
View(rp2012)
rp <- filter(rp2012, departement %in% c("Oise", "Rhône", "Hauts-de-Seine", "Lozère", "Bouches-du-Rhône"))
View(rp)
ggplot(data = rp)
## Ou, équivalent
ggplot(rp)
getwd()
## 1.1. Geometrías
ggplot(rp) + geom_histogram()
View(rp)
data("starwars")
force(starwars)
data("billboard")
force(billboard)
data("world_bank_pop")
force(world_bank_pop)
View(world_bank_pop)
data("diamonds")
force(diamonds)
data("economics")
force(economics)
View(economics)
data("iris")
force(iris)
data("iris")
force(iris)
ggplot(iris) + geom_histogram(aes(x = Sepal.Lenght))
ggplot(iris) + geom_histogram(aes(x = Sepal.Lenght))
View(iris)
names(iris)
ggplot(iris) + geom_histogram(aes(x = "Sepal.Width"))
ggplot(iris) + geom_histogram(aes(x = Sepal.Width))
ggplot(iris) + geom_histogram(aes(x = Sepal.Width))
ggplot(iris) + geom_histogram(aes(x = Sepal.Width,y=Sepal.Lenght))
ggplot(iris) + geom_point(aes(x = Sepal.Width,y=Sepal.Lenght))
names(iris)
ggplot(iris) + geom_point(aes(x = Sepal.Width,y=Petal.Length))
ggplot(iris) + geom_point(aes(x = Sepal.Width,y=Petal.Length))
ggplot(iris) + geom_point(aes(x = Sepal.Width,y=Petal.Length))
ggplot(iris) + geom_point(aes(x = Sepal.Width,y=Petal.Length))
packages <- c('tidyverse')
libraries(packages)
ggplot(iris) + geom_point(aes(x = Sepal.Width,y=Petal.Length))
df <- (x=c(1,2),y=c(2,4))
df <- (x=c(1,2) y=c(2,4))
df <- data.frame(x=c(1,2), y=c(2,4))
ggplot(df,aes(x))+
geom_point()
ggplot(df,aes(x=x,y=y))+
geom_point()
