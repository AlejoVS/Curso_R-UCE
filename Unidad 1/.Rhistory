ggplot(data=iris,aes(x=Sepal.Length)) +
geom_density(alpha=0.4,lwd=0.2, fill= "yellow")+
geom_vline(aes(xintercept = mean(Sepal.Length)), color= "red")
ggplot(data=iris,aes(x=Sepal.Length)) +
geom_density(alpha=0.4,lwd=0.2, fill= "yellow")+
geom_vline(aes(xintercept = mean(Sepal.Length)), color= "red")+
geom_text(aes(x=mean(Tiempo_Servicio_seg) + 10,
label="Media del tiempo de servicio",
y=0.01), colour="red", angle=90)
ggplot(data=iris,aes(x=Sepal.Length)) +
geom_density(alpha=0.4,lwd=0.2, fill= "yellow")+
geom_vline(aes(xintercept = mean(Sepal.Length)), color= "red")+
geom_text(aes(x=mean(Sepal.Length) + 10,
label="Media del tiempo de servicio",
y=0.01), colour="red", angle=90)
ggplot(data=iris,aes(x=Sepal.Length)) +
geom_density(alpha=0.4,lwd=0.2, fill= "yellow")+
geom_vline(aes(xintercept = mean(Sepal.Length)), color= "red")+
geom_text(aes(x=mean(Sepal.Length),
label="Media del tiempo de servicio",
y=0.01), colour="red", angle=90)
ggplot(data=iris,aes(x=Sepal.Length)) +
geom_density(alpha=0.4,lwd=0.2, fill= "yellow")+
geom_vline(aes(xintercept = mean(Sepal.Length)), color= "red")+
geom_text(aes(x=mean(Sepal.Length),
label="Media del tiempo de servicio",
y=0.005), colour="red", angle=90)
ggplot(data=iris,aes(x=Sepal.Length)) +
geom_density(alpha=0.4,lwd=0.2, fill= "yellow")+
geom_vline(aes(xintercept = mean(Sepal.Length)), color= "red")+
geom_text(aes(x=mean(Sepal.Length)+5,
label="Media del tiempo de servicio",
y=0.005), colour="red", angle=90)
ggplot(data=iris,aes(x=Sepal.Length)) +
geom_density(alpha=0.4,lwd=0.2, fill= "yellow")+
geom_vline(aes(xintercept = mean(Sepal.Length)), color= "red")
KO.z <- get.hist.quote(instrument="ko", start="2015-01-01",
end="2020-10-12", quote="AdjClose",
provider="yahoo", origin="1970-01-01",
compression="d", retclass="zoo")
library(tseries)
library(gganimate)
library(gifski)
library(ggplot2)
library(zoo)
library(tidyquant)
library(tidyverse)
KO.z <- get.hist.quote(instrument="ko", start="2015-01-01",
end="2020-10-12", quote="AdjClose",
provider="yahoo", origin="1970-01-01",
compression="d", retclass="zoo")
year <- index(KO.z)
data <- data.frame(KO.z,year)
View(data)
KO.z
year <- index(KO.z)
data <- data.frame(KO.z,year)
View(data)
ggplot(data,aes(x=year,y=Adjusted))+
geom_line()+
labs(title="Precio de cierre ajustado - The Coca Cola Company",
subtitle = "Periodo: 2010/01/01 - 2020/10/12 ",
y="Cierre Ajustado",
x="Fecha")+
theme_dark()+
transition_reveal(year)
tickers <- c('MCD','SBUX')
adjusted <- tq_get(tickers,from ='2018-01-01',
to = '2020-10-12',
get = 'stock.prices')
adjusted %>% group_by(symbol) %>% slice(1)
View(adjusted)
ggplot(adjusted,aes(x=date,y=adjusted,color =symbol))+
geom_line()+
labs(title="Precio de cierre ajustado en {frame_along}",
subtitle = "Periodo: 2010/01/01 - 2020/10/12 ",
y="Precio Ajustado",
x="Fecha",
caption = "Fuente: Yahoo Finance\nElaboraci?n: @CristopherA98")+
scale_y_continuous(breaks =seq(0,300,40))+
scale_x_date(date_breaks = "4 month",
date_labels = "%b-%y")+
scale_color_manual(values=c("#D86408","#C20868"))+
transition_reveal(date)
browseURL(url="https://ggplot2.tidyverse.org/",
browser = getOption("bowser"))
ggplot(data=iris,aes(x=Sepal.Length)) +
geom_density(alpha=0.4,lwd=0.2, fill= "#08C25A")+
geom_vline(aes(xintercept = mean(Sepal.Length)), color= "red")
adjusted %>% group_by(symbol) %>% slice(1)
adjusted %>% group_by(symbol)
adjusted %>% group_by(symbol) %>% slice(1)
install.packages("devtools")
devtools::install_github("RamiKrispin/coronavirus")
library(devtools)
install.packages('usethis')
library(usethis)
library(devtools)
devtools::install_github("RamiKrispin/coronavirus")
# 3. Escribir "3" en la cosoloa y dar enter
# 4. cargar el data frame con la siguiente linea de código
library(coronavirus)
covid19 <- data.frame(coronavirus)
View(covid19)
library(tidyverse)
covid19 <- tibble::as.tibble(covid19)
covid19
### 1.2.1. Selección de las variables que voy analizar
bdd_covid <- covid19 %>% select(-province,-(lat:long))
bdd_covid
### 1.2.2. Obtener el total de casos confirmados por país
unique(bdd_covid$type)
bdd_covid %>%
filter(type == "confirmed")
bdd_covid %>%
filter(type == "confirmed") %>%
group_by(country)
bdd_covid %>%
filter(type == "confirmed") %>%
group_by(country) %>%
summarise(Confirmados = sum(cases))
bdd_covid %>%
filter(type == "confirmed") %>%
group_by(country) %>%
summarise(Confirmados = sum(cases)) %>%
arrange(-Confirmados)
total <- bdd_covid %>%
filter(type == "confirmed") %>%
group_by(country) %>%
summarise(Confirmados = sum(cases)) %>%
arrange(-Confirmados)
bdd_covid %>%
filter(type == "confirmed") %>%
group_by(country) %>%
summarise(Confirmados = sum(cases)) %>%
arrange(-Confirmados)
total <- bdd_covid %>%
filter(type == "confirmed") %>%
group_by(country) %>%
summarise(Confirmados = sum(cases)) %>%
arrange(-Confirmados)
total %>% head(20)
bdd_covid %>%
group_by(country, type)
bdd_covid %>%
group_by(country, type) %>%
summarise(Confirmados = sum(cases))
bdd_covid %>%
group_by(country, type) %>%
summarise(Confirmados = sum(cases)) %>%
pivot_wider(names_from = type, values_from = Confirmados)
bdd_covid %>%
group_by(country, type) %>%
summarise(Confirmados = sum(cases)) %>%
pivot_wider(names_from = type, values_from = Confirmados) %>%
arrange(- confirmed)
bdd_covid %>%
group_by(country, type) %>%
summarise(Confirmados = sum(cases)) %>%
pivot_wider(names_from = type, values_from = Confirmados) %>%
arrange(- confirmed) %>%
mutate(Tasa_recuperados = recovered / confirmed,
Tasa_mortalidad = death / confirmed)
bdd_covid %>%
group_by(country, type) %>%
summarise(Confirmados = sum(cases)) %>%
pivot_wider(names_from = type, values_from = Confirmados) %>%
arrange(- confirmed) %>%
mutate(Tasa_recuperados = recovered / confirmed,
Tasa_mortalidad = death / confirmed) %>%
mutate(Tasa_recuperados = if_else(is.na(Tasa_recuperados), 0, Tasa_recuperados),
Tasa_mortalidad = if_else(is.na(Tasa_mortalidad), 0, Tasa_mortalidad))
bdd_covid %>%
group_by(country, type) %>%
summarise(Confirmados = sum(cases)) %>%
pivot_wider(names_from = type, values_from = Confirmados) %>%
arrange(- confirmed) %>%
mutate(Tasa_recuperados = recovered / confirmed,
Tasa_mortalidad = death / confirmed) %>%
mutate(Tasa_recuperados = if_else(is.na(Tasa_recuperados), 0, Tasa_recuperados),
Tasa_mortalidad = if_else(is.na(Tasa_mortalidad), 0, Tasa_mortalidad)) %>%
mutate(Tasa_recuperados = paste(round(100 * Tasa_recuperados, 2), "%", sep = ""),
Tasa_mortalidad = paste(round(100 * Tasa_mortalidad, 2), "%", sep = ""))
### 1.2.3. Tasa de mortalidad
bdd_final <- bdd_covid %>%
group_by(country, type) %>%
summarise(Confirmados = sum(cases)) %>%
pivot_wider(names_from = type, values_from = Confirmados) %>%
arrange(- confirmed) %>%
mutate(Tasa_recuperados = recovered / confirmed,
Tasa_mortalidad = death / confirmed) %>%
mutate(Tasa_recuperados = if_else(is.na(Tasa_recuperados), 0, Tasa_recuperados),
Tasa_mortalidad = if_else(is.na(Tasa_mortalidad), 0, Tasa_mortalidad)) %>%
mutate(Tasa_recuperados = paste(round(100 * Tasa_recuperados, 2), "%", sep = ""),
Tasa_mortalidad = paste(round(100 * Tasa_mortalidad, 2), "%", sep = ""))
bdd_final %>% filter(country == "Ecuador")
packages <- c('ggplot2','gifski','gganimate','tidyquant','tidyverse')
libraries(packages)
library(easypackages) #easypackages me permite cargar varios paquetes a la vez
libraries(packages)
data(iris)
force(iris)
iris <- tibble::as_tibble(iris)
iris
## 1.1. Geometría
ggplot(iris) + geom_histogram()
ggplot(iris,aes(x=Sepal.Width,y= Sepal.Length))
# Gráfico de dispersión
ggplot(iris,aes(x=Sepal.Width,y= Sepal.Length))+
geom_point()
ggplot(iris,aes(x=Sepal.Width,y= Sepal.Length,color=Species))+
geom_smooth()+
geom_point()
ggplot(iris,aes(x=Sepal.Width,y= Sepal.Length,color=Species))+
geom_smooth(es=F)+
geom_point()
# Gráfico separados dependiendo las categorías de una variable
ggplot(iris,aes(x=Sepal.Width,y= Sepal.Length,color=Species))+
geom_smooth()+
geom_point()+
facet_wrap(~Species)
ggplot(iris,aes(x=Sepal.Width,y= Sepal.Length,color=Species))+
geom_smooth()+
geom_point()+
facet_wrap(~Species,scales = 'free_y')
ggplot(iris,aes(x=Sepal.Width,y= Sepal.Length,color=Species))+
geom_boxplot()
ggplot(iris,aes(x=Species,y= Sepal.Length,color=Species))+
geom_boxplot()
ggplot(iris,aes(x=Species,y= Sepal.Length,color=Species))+
geom_boxplot()+
theme(legend.position = "none")
ggplot(data=iris,aes(x=Sepal.Length)) +
geom_histogram()
# Histogramas
ggplot(data=iris,aes(x=Sepal.Length,y=..density..)) +
geom_histogram()#aes(y = ..density..)
# Histogramas
ggplot(data=iris,aes(x=Sepal.Length,y=..density..)) +
geom_histogram(bins = 10)#aes(y = ..density..)
# Histogramas
ggplot(data=iris,aes(x=Sepal.Length,y=..density..)) +
geom_histogram(bins = 5)#aes(y = ..density..)
# Histogramas
ggplot(data=iris,aes(x=Sepal.Length,y=..density..)) +
geom_histogram(bins = 25)#aes(y = ..density..)
# Histogramas
ggplot(data=iris,aes(x=Sepal.Length,y=..density..)) +
geom_histogram(bins = 15)#aes(y = ..density..)
ggplot(data=iris,aes(x=Sepal.Length)) +
geom_histogram(aes(y = ..density..))+
geom_density(lwd=0.8)
ggplot(data=iris,aes(x=Sepal.Length,y=y = ..density..)) +
geom_histogram(bins = 15)+
geom_density(lwd=0.8)
ggplot(data=iris,aes(x=Sepal.Length,y=..density..)) +
geom_histogram(bins = 15)+
geom_density(lwd=0.8)
# Histograma dependiendo las categorias de la variable
ggplot(data=iris,aes(x=Sepal.Length,fill=Species)) +
geom_histogram()
ggplot(data=iris,aes(x=Sepal.Length,fill=Species)) +
geom_histogram()+
facet_wrap(~Species)
# Distribución de densidad
ggplot(data=iris,aes(x=Sepal.Length,color=Species)) +
geom_density()
browseURL(url="https://htmlcolorcodes.com/es/",
browser = getOption("bowser"))
ggplot(data=iris,aes(x=Sepal.Length)) +
geom_density(alpha=0.4,lwd=0.2, fill= "#08C25A")
ggplot(data=iris,aes(x=Sepal.Length)) +
geom_density(alpha=0.4,lwd=0.2, fill= "#CF8128")+
geom_vline(aes(xintercept = mean(Sepal.Length)), color= "red")
ggplot(data=iris,aes(x=Sepal.Length)) +
geom_density(alpha=0.4,lwd=0.2, fill= "#CF8128")+
geom_vline(aes(xintercept = mean(Sepal.Length)), color= "#B4DF24")
tickers <- c('MCD','SBUX')
tickers <- c('MCD','SBUX')
adjusted <- tq_get(tickers,from ='2018-01-01',
to = '2020-10-12',
get = 'stock.prices')
View(adjusted)
adjusted %>% group_by(symbol) %>% slice(1)
adjusted %>% group_by(symbol) %>% slice(50)
adjusted %>% group_by(symbol) %>% slice(1)
ggplot(adjusted,aes(x=date,y=adjusted,color =symbol))+
geom_line()
ggplot(adjusted,aes(x=date,y=adjusted,color =symbol))+
geom_line()+
labs(title="Precio de cierre ajustado en {frame_along}",
subtitle = "Periodo: 2018/01/01 - 2020/10/09 ",
y="Precio Ajustado",
x="Fecha",
caption = "Fuente: Yahoo Finance\nElaboración: @CristopherA98")
ggplot(adjusted,aes(x=date,y=adjusted,color =symbol))+
geom_line()+
labs(title="Precio de cierre ajustado en {frame_along}",
subtitle = "Periodo: 2018/01/01 - 2020/10/09 ",
y="Precio Ajustado",
x="Fecha",
caption = "Fuente: Yahoo Finance\nElaboración: @CristopherA98")+
scale_y_continuous(breaks =seq(0,300,40))
ggplot(adjusted,aes(x=date,y=adjusted,color =symbol))+
geom_line()+
labs(title="Precio de cierre ajustado en {frame_along}",
subtitle = "Periodo: 2018/01/01 - 2020/10/09 ",
y="Precio Ajustado",
x="Fecha",
caption = "Fuente: Yahoo Finance\nElaboración: @CristopherA98")+
scale_y_continuous(breaks =seq(0,100,40))
ggplot(adjusted,aes(x=date,y=adjusted,color =symbol))+
geom_line()+
labs(title="Precio de cierre ajustado en {frame_along}",
subtitle = "Periodo: 2018/01/01 - 2020/10/09 ",
y="Precio Ajustado",
x="Fecha",
caption = "Fuente: Yahoo Finance\nElaboración: @CristopherA98")+
scale_y_continuous(breaks =seq(0,300,40))
ggplot(adjusted,aes(x=date,y=adjusted,color =symbol))+
geom_line()+
labs(title="Precio de cierre ajustado en {frame_along}",
subtitle = "Periodo: 2018/01/01 - 2020/10/09 ",
y="Precio Ajustado",
x="Fecha",
caption = "Fuente: Yahoo Finance\nElaboración: @CristopherA98")+
scale_y_continuous(breaks =seq(0,300,40))+
scale_x_date(date_breaks = "6 month",
date_labels = "%b-%Y")
ggplot(adjusted,aes(x=date,y=adjusted,color =symbol))+
geom_line()+
labs(title="Precio de cierre ajustado en {frame_along}",
subtitle = "Periodo: 2018/01/01 - 2020/10/09 ",
y="Precio Ajustado",
x="Fecha",
caption = "Fuente: Yahoo Finance\nElaboración: @CristopherA98")+
scale_y_continuous(breaks =seq(0,300,40))+
scale_x_date(date_breaks = "6 month",
date_labels = "%b-%Y")+
scale_colour_manual(values=c("#D86408","#C20868")
ggplot(adjusted,aes(x=date,y=adjusted,color =symbol))+
geom_line()+
labs(title="Precio de cierre ajustado en {frame_along}",
subtitle = "Periodo: 2018/01/01 - 2020/10/09 ",
y="Precio Ajustado",
x="Fecha",
caption = "Fuente: Yahoo Finance\nElaboración: @CristopherA98")+
scale_y_continuous(breaks =seq(0,300,40))+
scale_x_date(date_breaks = "6 month",
date_labels = "%b-%Y")+
scale_colour_manual(values=c("#D86408","#C20868"))
ggplot(adjusted,aes(x=date,y=adjusted,color =symbol))+
geom_line()+
labs(title="Precio de cierre ajustado en {frame_along}",
subtitle = "Periodo: 2018/01/01 - 2020/10/09 ",
y="Precio Ajustado",
x="Fecha",
caption = "Fuente: Yahoo Finance\nElaboración: @CristopherA98")+
scale_y_continuous(breaks =seq(0,300,40))+
scale_x_date(date_breaks = "6 month",
date_labels = "%b-%Y")+
scale_colour_manual(values=c("#D86408","#C20868"),
name ="Empresa")
ggplot(adjusted,aes(x=date,y=adjusted,color =symbol))+
geom_line()+
labs(title="Precio de cierre ajustado en {frame_along}",
subtitle = "Periodo: 2018/01/01 - 2020/10/09 ",
y="Precio Ajustado",
x="Fecha",
caption = "Fuente: Yahoo Finance\nElaboración: @CristopherA98")+
scale_y_continuous(breaks =seq(0,300,40))+
scale_x_date(date_breaks = "6 month",
date_labels = "%b-%Y")+
scale_colour_manual(values=c("#D86408","#C20868"),
name ="Empresa")+
transition_reveal(date)
browseURL(url="https://ggplot2.tidyverse.org/",
browser = getOption("bowser"))
browseURL(url="https://ggplot2.tidyverse.org/",
browser = getOption("bowser"))
install.packages("rio")
paquetes <- c('DataExplorer','tidyverse','haven','readxl','rio')
library(easypackages)
library(paquetes)
libraries(paquetes)
source('~/.active-rstudio-document')
setwd("~/Learning-R/RWeekend/2020_10_RWeekend-main/RarIntroduccionR_2")
setwd("~/Learning-R/RWeekend/2020_10_RWeekend-main/RarIntroduccionR_2")
read.csv("csviris.csv",sep = ";")
excel_sheets("iris.xlsx")
read_excel("iris.xlsx",sheet = "hojaIris2",range = "A1:E15")
read_excel("iris.xlsx",sheet = "hojairis2",range = "A1:E15")
read_dta("dtairis.dta")
data <- read.csv("TelCo.csv",sep = ",")
data <- read.csv("TelCo.csv",sep = ",")
str(data)
datos <- read.csv("TelCo.csv",sep = ",")
str(datos)
datos <- datos[,!names(datos) %in%
c("MultipleLines","OnlineSecurity","OnlineBackup",
"DeviceProtection","TechSupport","StreamingTV",
"StreamingMovies")]
View(datos)
head(datos)
tail(datos)
datos$SeniorCitizen
datos$SeniorCitizen=factor(datos$SeniorCitizen,labels = c("No","Yes"))
head(datos$SeniorCitizen,n = 20)
mean(datos$TotalCharges,na.rm = T)
sd(datos$TotalCharges,na.rm = T)
var(datos$TotalCharges,na.rm = T)
median(datos$TotalCharges,na.rm = T)
quantile(datos$TotalCharges,na.rm = T)
quantile(datos$TotalCharges,probs = c(0.10,0.90),na.rm = T)
is.na(datos$TotalCharges)
sum(is.na(datos$TotalCharges))
sum(is.na(datos$TotalCharges))/length(datos$TotalCharges)*100
# Valores perdidos
is.na(datos$TotalCharges)
sum(is.na(datos$TotalCharges))
sum(is.na(datos$TotalCharges))/length(datos$TotalCharges)*100
(sum(is.na(datos$TotalCharges))/length(datos$TotalCharges))*100
apply(X = datos,MARGIN = 2,FUN = is.na )
apply(apply(X = datos,MARGIN = 2,FUN = is.na ),2,sum)
,2,sum)/nrow(datos))*100
(apply(apply(X = datos,MARGIN = 2,FUN = is.na ),2,sum)/nrow(datos))*100
round((apply(apply(X = datos,MARGIN = 2,FUN = is.na )
,2,sum)/nrow(datos))*100,2)
# Redondeo del porcentaje a decimales
round((apply(apply(X = datos,MARGIN = 2,FUN = is.na )
,2,sum)/nrow(datos))*100,2)
summary(datos$TotalCharges)
summary(datos)
table(datos$gender)
addmargins(table(datos$gender))
prop.table(table(datos$gender))
prop.table(table(datos$gender))*10
prop.table(table(datos$gender))*100
table(datos$PaymentMethod,datos$Churn)
prop.table(table(datos$PaymentMethod,datos$Churn))
prop.table(table(datos$PaymentMethod,datos$Churn),margin = 1)
round(prop.table(table(datos$PaymentMethod,datos$Churn),margin = 1),2)
round(prop.table(table(datos$PaymentMethod,datos$Churn),margin = 1),2)
addmargins(table(datos$PaymentMethod,datos$Churn))
round(prop.table(table(datos$PaymentMethod,datos$Churn),margin = 2),2)
round(prop.table(table(datos$PaymentMethod,datos$Churn),margin = 1),2) # proporcion a nivel de filas
prop.table(table(datos$PaymentMethod,datos$Churn)
prop.table(table(datos$PaymentMethod,datos$Churn))
prop.table(table(datos$PaymentMethod,datos$Churn))
quantile(datos$TotalCharges,na.rm = T)
datos$TotalChargesQQ <- cut(datos$TotalCharges,
breaks = c(18,401,1397,3794,9685),
labels = c("18:401","401:1397","1397:3794","+3794"))
table(datos$TotalChargesQQ,useNA = "always") #
levels(datos$PaymentMethod)
View(datos)
summary(datos$PaymentMethod)
datos$PaymentMethod <- as.factor(datos$PaymentMethod)
levels(datos$PaymentMethod)
datos$PaymentMethod=as.character(datos$PaymentMethod)
datos$PaymentMethod[datos$PaymentMethod=="Bank transfer (automatic)"|
datos$PaymentMethod=="Credit card (automatic)"]="Automático"
datos$PaymentMethod=factor(datos$PaymentMethod)
table(datos$PaymentMethod)
sum(is.na(datos$tenure))
quantile(datos$MonthlyCharges,na.rm = T)
summary(datos$tenure)
prop.table(table(datos$Contract))*100
prop.table(table(datos$Contract,datos$Churn))*100
prop.table(table(datos$Contract,datos$Churn),2)*100
prop.table(table(datos$Contract,datos$Churn),margin = 1)*100
plot(datos$TotalCharges[1:100],y=datos$tenure [1:100],
main="Gráfico del total de pago y los meses de servicio "
,sub = "Gráficos en R",xlab = "Total",ylab ="Meses")
ggplot(datos, aes(x=TotalCharges,y=tenure))+
geom_point()
ggplot(datos, aes(x=TotalCharges[1:100],y=tenure[1:100]))+
geom_point()
ggplot(datos, aes(x=TotalCharges,y=tenure))+
geom_point()
ggplot(datos, aes(x=TotalCharges,y=tenure))+
geom_point()+
labs(title = "Gráfico del total de pago y los meses de servicio")
ggplot(datos, aes(x=TotalCharges,y=tenure))+
geom_point()+
labs(title = "Gráfico del total de pago y los meses de servicio",
x= "Total",
y="Messe")
# Gráfico de cajas
boxplot(datos$MonthlyCharges)
ggplot(datos, aes(x=MonthlyCharges))+
geom_boxplot()
ggplot(datos, aes(y=MonthlyCharges))+
geom_boxplot()
ggplot(datos, aes(y=MonthlyCharges,y=PaymentMethod))+
geom_boxplot()
ggplot(datos, aes(x=MonthlyCharges,y=PaymentMethod))+
geom_boxplot()
ggplot(datos, aes(x=PaymentMethod,y=MonthlyCharges,))+
geom_boxplot()
ggplot(datos, aes(x=PaymentMethod,y=MonthlyCharges,color = PaymentMethod))+
geom_boxplot()
ggplot(datos, aes(x=PaymentMethod,y=MonthlyCharges,color = PaymentMethod))+
geom_boxplot(color=c("red","yellow","blue"))
ggplot(datos, aes(x=PaymentMethod,y=MonthlyCharges,color = PaymentMethod))+
geom_boxplot(fill=c("red","yellow","blue"))
ggplot(datos, aes(x=PaymentMethod,y=MonthlyCharges,color = PaymentMethod))+
geom_boxplot(colors=c("red","yellow","blue"))
ggplot(datos, aes(x=PaymentMethod,y=MonthlyCharges,color = PaymentMethod))+
geom_boxplot(color=c("red","yellow","blue"))
hist(datos$TotalCharges)
hist(datos$TotalCharges,probability = T,breaks = 10 )
