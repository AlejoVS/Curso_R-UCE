rmarkdown::render("in.Rmd", output_format = "powerpoint_presentation")
rmarkdown::render("C01-Introduccion.Rmd", output_format = "powerpoint_presentation")
rmarkdown::render("C01-Introduccion.Rmd", output_format = "powerpoint_presentation")
getwd()
setwd("~/Learning-R/Curso R - UCE/Presentaciones")
rmarkdown::render("C01-Introduccion.Rmd", output_format = "powerpoint_presentation")
getwd()
<b> <font color=SteelBlue face=Cambria size=7> = </font> </b>
![R](figures/interfaz_R.PNG)
<b> <font color=SteelBlue face=Cambria size=7> = </font> </b>
![R](figures/interfaz_R.PNG)
## <b> <font color=SteelBlue face=Arial size=6> Instalación de paquetes</font> </b>
<p align="right" width="20" height="20">
![Paquetes](figures/rstudio_paquetes.png){ width=15% }
search()
library(ggplot2)
search()
# Instalacion desde el repositorio CRAN
install.packages('tidyverse')
# Reducimos el area de impresion
options(width=45)
rnorm(10)
# Aumentamos el area de impresion
options(width=95)
rnorm(10)
# Instalacion multiples paquetes
packages <- c("ggplot2","lubridate","readr")
install.packages(packages, dependencies=TRUE)
# funciones apply
sapply(X=packages, FUN=install.packages, dependencies=TRUE)
(.packages())
install.packages(packages, dependencies=TRUE)
(.packages())
(.packages())
# Cargar las librerias
library(ggplot2)
# Cargar varios paquetes
packages <- c("ggplot2","lubridate","readr")
sapply(X=packages, FUN=library, character.only=TRUE)
# funciones apply
# sapply(X=packages, FUN=library, character.only=TRUE)
(.packages())
# Cargar las librerias
library(ggplot2)
# Vectores
typeof(a)
# Vectores
a <- 250
typeof(a)
# Longitud (Número de elementos)
length(a)
# Atributos (Metadata)
attributes(a)
# Para probar que una estructura de datos es un vector (atómico o lista)
# se utiliza la función:
is.vector(a)
# Vectores atómicos
dbl_var <- c(1, 2, -1)
int_var <- c(3L, 7L, 1L) # con el sufijo L se declaran números enteros
log_var <- c(FALSE, TRUE, F, T) # TRUE y FALSE (T, F) se usan para crear
c(1, c(2, c(3,4))) ; c(1, 2, 3, 4) # los vectores pueden ser anidados
a <- c(1, c(2, c(3,4)))
a
a <- c(1, c(2, c(3,4))); c(1, 2, 3, 4)
a
c(1, c(2, c(3,4))) ; c(1, 2, 3, 4,5) # los vectores pueden ser anidados
typeof(dbl_var)
# Elementos de una matriz
# Columnas 2 y 4
mtx <- matrix (1:12, nrow=3, ncol=4, byrow=FALSE)
mtx[,c(2,4)]
# Filas 2 y 4
mtx[c(2,4),]
x
# Ejemplo más ilustrativo
x<-array(c(45,46,65,55,170,167,48,49,68,56,169,165),c(2,3,2))
dimnames(x)<-list(c("hombres","mujeres"),c("edad","peso","altura"),
c("Sur","Norte"))
x
x[,,3]
# Ejemplo más ilustrativo
x<-array(c(45,46,65,55,170,167,48,49,68,56,169,165),c(2,3,2))
x <- c(5,6,7,8)
y <- (10,20,15,30)
y <- c(10,20,15,30)
plot(x,y)
plot(x,y,,type="m",x=lab"Eje X",ylab="Eje Y")
plot(x,y,,type="n",x=lab"Eje X",ylab="Eje Y")
plot(x,y,,type="n",xlab="Eje X",ylab="Eje Y")
plot(x,y,,type="n",xlab="Eje X",ylab="Eje Y")
plot(x,y,xlab="Eje X",ylab="Eje Y")
linea <- lm(x,y)
linea <- lm(x~y)
abline(linea)
linea
abeline(linea)
abline(linea)
plot(x,y,xlab="Eje X",ylab="Eje Y")
abline(linea)
points(x,y,xlab="Eje X",ylab="Eje Y")
linea <- lm(x~y)
plot(x,y,xlab="Eje X",ylab="Eje Y")
points(x,y,xlab="Eje X",ylab="Eje Y")
abline(linea)
x <- c(5,6,7,8)
y <- c(10,20,15,30)
plot(x,y)
points(x,y,xlab="Eje X",ylab="Eje Y")
points(x,y,xlab="Eje X",ylab="Eje Y")
points(x,y)
plot(x,y)
points(x,y)
points(x,y,type="n",xlab="Eje X",ylab="Eje Y")
plot(x,y,type="n",xlab="Eje X",ylab="Eje Y")
points(x,y)
abline(linea)
linea <- lm(x~y)
abline(linea)
5+10
8/20
sin(10)
# Informacion paquetes basicos
search()
# Instalacion desde el repositorio CRAN
install.packages('tidyverse')
# Se indica si se deben instalar o no los
# paquetes requeridos para que este funcione.
install.packages('tidyverse', dependencies=TRUE)
# Instalacion multiples paquetes
packages <- c("reshape","lubridate","readr")
install.packages(packages, dependencies=TRUE)
# funciones apply
sapply(X=packages, FUN=install.packages, dependencies=TRUE)
# Cargar las librerias
library(ggplot2)
# Cargar varios paquetes
packages <- c("ggplot2","lubridate","readr")
# funciones apply
sapply(X=packages, FUN=library, character.only=TRUE)
# Conocer que paquetes están cargados
(.packages())
#----- Vectores
a <- 250
typeof(a)
a <-  5
b <-  5
if (a == b)
if (a == b){
print("a es igual a b")
}
print(a)
if(a>b){
a = a+2
print(a)
}
a = a+2
a <-  7
if(a>b){
a = a+2
}
a <-  8
b <-  5
if (a == b){
print("a es igual a b")
}
a <-  5
b <-  5
if (a == b){
print("a es igual a b")
}
print("a es diferente de b")
a <- 5
b <- 5
if (a == b){
print("a es igual a b")
} else{
print("a es diferente de b")
}
a <- 7
b <- 5
if (a == b){
print("a es igual a b")
} else{
print("a es diferente de b")
}
x <- 4
if (x > 0) {
texto <- 'positivo'
} else {
texto <- 'positivo'
}
texto
x <- c(2, 3, -5, 6, -2, 8)
if (x > 0) {
print("positivo")
} else {
print("negativo")
}
knitr::opts_chunk$set(echo = TRUE)
x <- c(2, 3, -5, 6, -2, 8)
ifelse(x > 0,"positivo","negativo")
### for
x <- c(12, 22, 28, 41)
for (i in 1:4)
for (i in 1:4) {
print(i)
}
# Ejemplo 2
x <- c(12, 22, 28, 41)
for (i in x){
print(i+1)
}
print(i+5)
# Ejemplo 2
x <- c(12, 22, 28, 41)
for (i in x){
print(i+5)
}
cat('\n', i, 'a˜os dec’)
i <- i + 1
}
}
print("a")
### repeat
i <- 1
repeat {
if (i > 15) break
else{
print("a")
i <- i + 1
}
}
print(i, "años de edad")
i <- i + 1
### repeat
i <- 1
repeat {
if (i > 15) break
else{
print(i, "años de edad")
i <- i + 1
}
}
cat(i, "años de edad")
repeat {
if (i > 15) break
else{
cat(i, "años de edad")
i <- i + 1
}
}
repeat {
if (i > 15) break
else{
cat('\n',i, "años de edad")
i <- i + 1
}
}
### repeat
i <- 1
repeat {
if (i > 15) break
else{
cat('\n', i, "años de edad")
i <- i + 1
}
}
### repeat
i <- 1
repeat {
if (i > 5) break
else{
cat('\n', i, "años de edad")
i <- i + 1
}
}
i <- 1
while (i<5) {
i <- i+10
print(i)
}
i <- 1
while (i<5) {
print(i)
i <- i+10
}
i <- i+1
i <- 0
while (i<16) {
print(i)
i <- i+1
}
i <- 1
while (i<4) {
print(i)
i <- i+1
}
i <- 1
while (i<5) {
i <- i+1
print(i)
}
i <- 1
while (i<5) {
i <- i+10
print(i)
}
i <- i+2
i <- 1
while (i<5) {
i <- i+2
print(i)
}
